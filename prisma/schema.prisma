generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  DELIVERY_PERSON
}

model User {
  id       String @id @default(uuid())
  name     String
  cpf      String @unique
  password String

  role    UserRole @default(DELIVERY_PERSON)
  orders  Order[]
  address Address?

  @@map("users")
}

model Recipient {
  id   String @id @default(uuid())
  name String

  address      Address?
  orders       Order[]
  Notification Notification[]

  @@map("recipients")
}

model Address {
  id               String  @id @default(uuid())
  street           String
  number           Int
  complement       String?
  neighborhood     String
  city             String
  state            String
  zipcode          String
  latitude         Decimal
  longitude        Decimal
  recipientId      String? @unique @map("recipient_id")
  deliveryPersonId String? @unique @map("delivery_person_id")

  recipient      Recipient? @relation(fields: [recipientId], references: [id], onDelete: Cascade)
  deliveryPerson User?      @relation(fields: [deliveryPersonId], references: [id], onDelete: Cascade)

  @@map("addresses")
}

enum OrderStatus {
  STORED
  WAITING
  PICKED_UP
  DELIVERED
}

model Order {
  id               String      @id @default(uuid())
  recipientId      String      @map("recipient_id")
  deliveryPersonId String?     @map("delivery_person_id")
  status           OrderStatus
  storedAt         DateTime    @default(now())
  postedAt         DateTime?
  pickedUpAt       DateTime?
  deliveredAt      DateTime?

  deliveryPerson          User?                    @relation(fields: [deliveryPersonId], references: [id])
  recipient               Recipient                @relation(fields: [recipientId], references: [id])
  orderConfirmationPhotos OrderConfirmationPhoto[]

  @@map("orders")
}

model OrderConfirmationPhoto {
  id      String  @id @default(uuid())
  title   String
  url     String
  orderId String? @map("order_id")

  order Order? @relation(fields: [orderId], references: [id])

  @@map("order_confirmation_photos")
}

model Notification {
  id          String    @id @default(uuid())
  recipientId String    @map("recipient_id")
  title       String
  content     String
  readAt      DateTime? @map("read_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  recipient Recipient @relation(fields: [recipientId], references: [id], onDelete: Cascade)

  @@map("notifications")
}
